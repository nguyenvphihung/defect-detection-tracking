# DeepSORT tracking logic
import cv2
import numpy as np
import torch
import yaml
import os
from typing import List, Tuple, Dict, Optional

# T·∫£i th∆∞ vi·ªán DeepSORT - gi·∫£ ƒë·ªãnh ƒë√£ c√†i ƒë·∫∑t
# (T·∫°o th∆∞ vi·ªán gi·∫£ l·∫≠p v√¨ ch∆∞a c√≥ th∆∞ vi·ªán th·∫≠t trong d·ª± √°n, ƒë√¢y ch·ªâ l√† m·∫´u)
class DeepFeatureExtractor:
    """Class gi·∫£ l·∫≠p cho encoder DeepSORT"""
    def __init__(self, model_type='osnet_x0_25'):
        self.model_type = model_type
        print(f"üì¶ S·ª≠ d·ª•ng m√¥ h√¨nh embedding: {model_type}")
        
    def __call__(self, crops: List[np.ndarray]):
        """Tr√≠ch xu·∫•t features t·ª´ c√°c crop h√¨nh ·∫£nh"""
        if not crops:
            return np.array([])
        # Gi·∫£ l·∫≠p tr√≠ch xu·∫•t feature
        # C√†i ƒë·∫∑t th·ª±c t·∫ø s·∫Ω s·ª≠ d·ª•ng m·∫°ng CNN/ResNet/...
        return np.random.rand(len(crops), 512) # 512 dimensions

class KalmanTracker:
    """Class gi·∫£ l·∫≠p cho Kalman filter tracker c·ªßa DeepSORT"""
    def __init__(self, bbox, track_id):
        self.track_id = track_id
        self.bbox = bbox
        self.time_since_update = 0
        self.hits = 1
        self.age = 1
    
    def predict(self):
        # Gi·∫£ l·∫≠p d·ª± ƒëo√°n Kalman
        pass
    
    def update(self, bbox):
        self.bbox = bbox
        self.hits += 1
        self.time_since_update = 0
    
    def get_state(self):
        return self.bbox

class DeepSORT:
    def __init__(self, config_path: str):
        """
        Kh·ªüi t·∫°o DeepSORT tracker
        Args:
            config_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh DeepSORT YAML
        """
        self.trackers = []
        self.next_id = 1
        
        # ƒê·ªçc c·∫•u h√¨nh
        with open(config_path, 'r') as f:
            cfg = yaml.safe_load(f)
            self.config = cfg['DEEPSORTC']
        
        # T·∫£i c√°c tham s·ªë c·∫•u h√¨nh
        self.max_dist = self.config['MAX_DIST']
        self.min_confidence = self.config['MIN_CONFIDENCE']
        self.nms_max_overlap = self.config['NMS_MAX_OVERLAP']
        self.max_iou_distance = self.config['MAX_IOU_DISTANCE']
        self.max_age = self.config['MAX_AGE']
        self.n_init = self.config['N_INIT']
        self.nn_budget = self.config['NN_BUDGET']
        
        # Kh·ªüi t·∫°o feature extractor
        model_type = self.config['MODEL_TYPE']
        self.extractor = DeepFeatureExtractor(model_type)
        
        print(f"üìå ƒê√£ kh·ªüi t·∫°o DeepSORT: max_dist={self.max_dist}, max_age={self.max_age}")
    
    def _get_features(self, frame: np.ndarray, detections: List[Tuple]):
        """L·∫•y feature t·ª´ c√°c c·∫°nh c·∫Øt (crops) c·ªßa detections"""
        crops = []
        for _, conf, bbox in detections:
            if conf < self.min_confidence:
                continue
            x, y, w, h = bbox
            crop = frame[y:y+h, x:x+w]
            crops.append(crop)
        
        # Tr√≠ch xu·∫•t features
        features = self.extractor(crops)
        return features
    
    def _match_detections_to_tracks(self, detections, features):
        """Gh√©p c·∫∑p detections v·ªõi c√°c tracks hi·ªán t·∫°i"""
        # ƒê√¢y l√† ph·∫ßn gi·∫£ l·∫≠p ƒë∆°n gi·∫£n, DeepSORT th·ª±c t·∫ø ph·ª©c t·∫°p h∆°n nhi·ªÅu
        assignments = []
        unmatched_tracks = list(range(len(self.trackers)))
        unmatched_detects = list(range(len(detections)))
        
        # X·ª≠ l√Ω gi·∫£ l·∫≠p
        for t in unmatched_tracks[:]: 
            for d in unmatched_detects[:]:
                # Gi·∫£ l·∫≠p gh√©p c·∫∑p d·ª±a tr√™n IoU v√† cosine distance
                # Th·ª±c t·∫ø DeepSORT s·ª≠ d·ª•ng Hungarian algorithm + Mahalanobis + cosine distance
                tracker_bbox = self.trackers[t].get_state()
                detect_bbox = detections[d][2]
                
                # M√¥ ph·ªèng t√≠nh IoU v√† ki·ªÉm tra gh√©p c·∫∑p
                iou = self._calc_iou(tracker_bbox, detect_bbox)
                if iou > 0.5: # ng∆∞·ª°ng IoU gi·∫£ l·∫≠p
                    assignments.append((t, d))
                    unmatched_tracks.remove(t)
                    unmatched_detects.remove(d)
                    break
        
        return assignments, unmatched_tracks, unmatched_detects
    
    def _calc_iou(self, bbox1, bbox2):
        """T√≠nh IoU gi·ªØa hai bounding box"""
        x1, y1, w1, h1 = bbox1
        x2, y2, w2, h2 = bbox2
        
        # T√≠nh t·ªça ƒë·ªô ph·∫ßn ch·ªìng nhau
        xx1 = max(x1, x2)
        yy1 = max(y1, y2)
        xx2 = min(x1 + w1, x2 + w2)
        yy2 = min(y1 + h1, y2 + h2)
        
        # T√≠nh di·ªán t√≠ch
        w = max(0, xx2 - xx1)
        h = max(0, yy2 - yy1)
        overlap = w * h
        
        # T√≠nh IoU
        area1 = w1 * h1
        area2 = w2 * h2
        iou = overlap / (area1 + area2 - overlap + 1e-6)
        
        return iou
    
    def update(self, frame: np.ndarray, detections: List[Tuple]) -> List[Tuple]:
        """
        C·∫≠p nh·∫≠t tracker v·ªõi danh s√°ch ph√°t hi·ªán m·ªõi
        Args:
            frame: Frame hi·ªán t·∫°i
            detections: Danh s√°ch ph√°t hi·ªán [(class_id, confidence, [x,y,w,h]),...]
        Returns:
            Danh s√°ch theo d√µi [(track_id, class_id, [x,y,w,h]),...]  
        """
        # 1. L·ªçc c√°c detection c√≥ ƒë·ªô tin c·∫≠y cao
        dets = [det for det in detections if det[1] >= self.min_confidence]
        
        # 2. Tr√≠ch xu·∫•t features
        features = self._get_features(frame, dets)
        
        # 3. D·ª± ƒëo√°n v·ªã tr√≠ c·ªßa c√°c track hi·ªán t·∫°i
        for tracker in self.trackers:
            tracker.predict()
        
        # 4. Gh√©p c·∫∑p detections v·ªõi c√°c tracks hi·ªán t·∫°i
        assignments, unmatched_tracks, unmatched_detects = \
            self._match_detections_to_tracks(dets, features)
        
        # 5. C·∫≠p nh·∫≠t c√°c tracks ƒë√£ gh√©p c·∫∑p
        for track_idx, det_idx in assignments:
            _, _, bbox = dets[det_idx]
            self.trackers[track_idx].update(bbox)
        
        # 6. X·ª≠ l√Ω c√°c track kh√¥ng gh√©p c·∫∑p ƒë∆∞·ª£c
        for track_idx in unmatched_tracks:
            tracker = self.trackers[track_idx]
            tracker.time_since_update += 1
        
        # 7. X√≥a c√°c track qu√° c≈©
        self.trackers = [t for t in self.trackers if t.time_since_update <= self.max_age]
        
        # 8. T·∫°o track m·ªõi cho c√°c detection ch∆∞a gh√©p c·∫∑p
        for det_idx in unmatched_detects:
            class_id, _, bbox = dets[det_idx]
            # T·∫°o tracker m·ªõi
            new_track = KalmanTracker(bbox, self.next_id)
            self.trackers.append(new_track)
            self.next_id += 1
        
        # 9. Tr·∫£ v·ªÅ k·∫øt qu·∫£ tracking
        results = []
        for tracker in self.trackers:
            # Ch·ªâ tr·∫£ v·ªÅ track ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n (confirmed)
            if tracker.time_since_update == 0 and tracker.hits >= self.n_init:
                # Gi·∫£ ƒë·ªãnh class_id l√† 0 (person)
                class_id = 0
                track_id = tracker.track_id
                bbox = tracker.get_state()
                results.append((track_id, class_id, bbox))
        
        return results
