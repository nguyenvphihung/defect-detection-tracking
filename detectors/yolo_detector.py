# YOLOv5 detector implementation
import cv2
import numpy as np
import torch
import os
import time
from typing import List, Tuple, Dict, Any

class YOLODetector:
    """
    L·ªõp detector s·ª≠ d·ª•ng m√¥ h√¨nh YOLOv5 ƒë·ªÉ ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng
    """
    def __init__(self, model_name='yolov5s', conf_thres=0.25, classes=None, use_gt=False):
        """
        Kh·ªüi t·∫°o YOLODetector
        Args:
            model_name: T√™n m√¥ h√¨nh YOLOv5 (yolov5s, yolov5m, v.v.)
            conf_thres: Ng∆∞·ª°ng tin c·∫≠y
            classes: Danh s√°ch c√°c class c·∫ßn l·ªçc ([0] cho ng∆∞·ªùi)
            use_gt: N·∫øu True, s·∫µn s√†ng s·ª≠ d·ª•ng ground truth n·∫øu c√≥
        """
        self.conf_thres = conf_thres
        self.classes = classes  # [0] cho ng∆∞·ªùi
        self.frame_count = 0
        self.use_gt = use_gt
        self.gt_data = None  # S·∫Ω ch·ª©a d·ªØ li·ªáu ground truth n·∫øu c√≥
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        
        # T·∫£i m√¥ h√¨nh YOLOv5 
        if not use_gt:
            try:
                self.model = torch.hub.load('ultralytics/yolov5', model_name, pretrained=True)
                self.model.to(self.device)
                self.model.eval()
                
                # Thi·∫øt l·∫≠p tham s·ªë
                self.model.conf = conf_thres  # Ng∆∞·ª°ng tin c·∫≠y
                if classes is not None:
                    self.model.classes = classes  # Ch·ªâ ph√°t hi·ªán c√°c class ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
                    
                print(f"üöÄ ƒê√£ t·∫£i m√¥ h√¨nh YOLOv5 {model_name} tr√™n {self.device}. Ng∆∞·ª°ng: {conf_thres}, Classes: {classes}")
            except Exception as e:
                print(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh YOLOv5: {e}")
                print("‚ö†Ô∏è S·∫Ω s·ª≠ d·ª•ng ground truth n·∫øu c√≥!")
                self.model = None
                self.use_gt = True
        else:
            # Ch·ªâ s·ª≠ d·ª•ng ground truth
            self.model = None
            print(f"üìÑ Ch·ªâ s·ª≠ d·ª•ng ground truth, kh√¥ng t·∫£i m√¥ h√¨nh YOLOv5")
    
    def load_gt_if_available(self, source_path: str) -> bool:
        """
        T·∫£i d·ªØ li·ªáu ground truth n·∫øu c√≥ (cho ph∆∞∆°ng ph√°p fallback)
        Args:
            source_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c MOT16
        Returns:
            True n·∫øu ƒë√£ t·∫£i ground truth, False n·∫øu kh√¥ng
        """
        gt_path = os.path.join(source_path, "gt", "gt.txt")
        if os.path.exists(gt_path):
            print(f"T√¨m th·∫•y d·ªØ li·ªáu ground truth: {gt_path}")
            self.gt_data = {}
            total_objects = 0
            
            # ƒê·ªçc to√†n b·ªô file ground truth
            with open(gt_path, 'r') as f:
                for line in f:
                    fields = line.strip().split(',')
                    # Format MOT16: <frame_id>,<object_id>,<x>,<y>,<w>,<h>,<confidence>,<class_id>,<visibility>
                    frame_id = int(fields[0])
                    object_id = int(fields[1])
                    
                    # B·ªè qua c√°c ƒë·ªëi t∆∞·ª£ng kh√¥ng h·ª£p l·ªá
                    confidence = float(fields[6]) if len(fields) > 6 else 0
                    if confidence == 0:  # Ch·ªâ l·∫•y c√°c ƒë·ªëi t∆∞·ª£ng c√≥ confidence > 0
                        continue
                        
                    # L·∫•y th√¥ng tin v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc
                    x, y, w, h = map(float, fields[2:6])
                    
                    # V·ªõi MOT16 class 1=person, c√°c class kh√°c th∆∞·ªùng kh√¥ng quan t√¢m
                    class_id = int(fields[7]) if len(fields) > 7 else 1
                    
                    # Ch·ªâ l·∫•y ng∆∞·ªùi (class 1) ho·∫∑c c√°c class c·∫ßn thi·∫øt
                    if class_id != 1 and (self.classes is not None and class_id not in self.classes):
                        continue
                    
                    # Chuy·ªÉn ƒë·ªïi t·ª´ class c·ªßa MOT sang class c·ªßa YOLO n·∫øu c·∫ßn
                    # MOT16: class 1 = person, YOLO: class 0 = person
                    yolo_class_id = 0 if class_id == 1 else class_id
                    
                    # Kh·ªüi t·∫°o danh s√°ch cho frame n·∫øu ch∆∞a c√≥
                    if frame_id not in self.gt_data:
                        self.gt_data[frame_id] = []
                    
                    # Th√™m ƒë·ªëi t∆∞·ª£ng v√†o danh s√°ch c·ªßa frame t∆∞∆°ng ·ª©ng
                    # Format: (class_id, confidence, [x, y, w, h])
                    self.gt_data[frame_id].append(
                        (yolo_class_id, confidence, [int(x), int(y), int(w), int(h)])
                    )
                    total_objects += 1
            
            # Th·ªëng k√™ s·ªë frame v√† ƒë·ªëi t∆∞·ª£ng
            unique_frames = len(self.gt_data)
            print(f"üöÄ ƒê√£ t·∫£i ground truth cho {unique_frames} frames, t·ªïng c·ªông {total_objects} ƒë·ªëi t∆∞·ª£ng")
            
            # In ra m·ªôt v√†i frame ƒë·∫ßu ti√™n ƒë·ªÉ debug
            first_10_frames = sorted(list(self.gt_data.keys()))[:10]
            for frame in first_10_frames:
                print(f"Frame {frame}: {len(self.gt_data[frame])} ƒë·ªëi t∆∞·ª£ng")
                
            # ƒê√°nh d·∫•u l√† ƒëang s·ª≠ d·ª•ng ground truth
            self.use_gt = True
            return True
        
        # Kh√¥ng t√¨m th·∫•y ground truth
        print(f"Kh√¥ng t√¨m th·∫•y ground truth: {gt_path}")
        return False
    
    def detect(self, frame: np.ndarray, frame_id: int = None) -> List[Tuple[int, float, List[int]]]:
        """
        Ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng trong frame b·∫±ng YOLOv5 ho·∫∑c ground truth
        Args:
            frame: ·∫¢nh ƒë·∫ßu v√†o d·∫°ng numpy array (BGR)
            frame_id: ID c·ªßa frame (c·∫ßn thi·∫øt cho ground truth)
        Returns:
            List c√°c detection [class_id, confidence, [x, y, w, h]]
        """
        self.frame_count += 1
        
        # S·ª≠ d·ª•ng frame_id truy·ªÅn v√†o n·∫øu c√≥, n·∫øu kh√¥ng d√πng frame_count
        current_frame_id = frame_id if frame_id is not None else self.frame_count
        
        # Debug th√¥ng tin frame_count v·ªõi t·∫ßn su·∫•t th·∫•p h∆°n ƒë·ªÉ gi·∫£m b·ªõt th√¥ng tin
        if self.frame_count % 100 == 0:
            print(f"DEBUG DETECTOR: X·ª≠ l√Ω frame {self.frame_count}, MOT frame_id={current_frame_id}")
        
        # 1. Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu ground truth cho frame hi·ªán t·∫°i v√† ƒëang ·ªü ch·∫ø ƒë·ªô s·ª≠ d·ª•ng GT
        if self.use_gt and self.gt_data is not None and current_frame_id in self.gt_data:
            detections = self.gt_data[current_frame_id]
            
            # Cho bi·∫øt s·ªë l∆∞·ª£ng ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ph√°t hi·ªán
            if detections:
                # Ch·ªâ in log debug cho nh·ªØng frame c√≥ ƒë·ªëi t∆∞·ª£ng v√† theo t·∫ßn su·∫•t ph√π h·ª£p
                if self.frame_count % 20 == 0 or len(detections) > 5:
                    print(f"DEBUG DETECTOR (Ground Truth): ƒê√£ t√¨m th·∫•y {len(detections)} ƒë·ªëi t∆∞·ª£ng trong frame {current_frame_id}")
            return detections
        
        # 2. N·∫øu kh√¥ng s·ª≠ d·ª•ng GT, v√† model YOLOv5 ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng
        if self.model is not None:
            # Th·ªùi gian b·∫Øt ƒë·∫ßu ƒë·ªÉ t√≠nh to√°n FPS
            start_time = time.time()
            
            # Chuy·ªÉn frame v·ªÅ ƒë·ªãnh d·∫°ng RGB (YOLOv5 c·∫ßn RGB)
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # Inference
            results = self.model(rgb_frame, size=640)  # size c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh (640, 1280, ...)
            
            # L·∫•y k·∫øt qu·∫£
            detections = []
            predictions = results.xyxy[0].cpu().numpy()  # L·∫•y k·∫øt qu·∫£ frame ƒë·∫ßu ti√™n (batch)
            
            # T√≠nh th·ªùi gian x·ª≠ l√Ω
            inference_time = time.time() - start_time
            if self.frame_count % 20 == 0:  # In FPS m·ªói 20 frame
                fps = 1.0 / inference_time if inference_time > 0 else 0
                print(f"üîç YOLOv5 FPS: {fps:.2f}, Inference time: {inference_time*1000:.1f}ms")
            
            # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh ƒë·ªãnh d·∫°ng [class_id, confidence, [x, y, w, h]]
            for pred in predictions:
                x1, y1, x2, y2, conf, class_id = pred
                class_id = int(class_id)
                
                # Skip n·∫øu d∆∞·ªõi ng∆∞·ª°ng tin c·∫≠y (m·∫∑c d√π model ƒë√£ l·ªçc s∆° b·ªô)
                if conf < self.conf_thres:
                    continue
                    
                # Chuy·ªÉn t·ª´ [x1, y1, x2, y2] sang [x, y, w, h] - format YOLO sang format MOT
                x = int(x1)
                y = int(y1)
                w = int(x2 - x1)
                h = int(y2 - y1)
                
                detections.append((class_id, float(conf), [x, y, w, h]))
            
            # Debug info
            if self.frame_count % 20 == 0 or len(detections) > 5:  # In th√¥ng tin m·ªói 20 frame ho·∫∑c khi c√≥ nhi·ªÅu detections
                print(f"üîç YOLOv5: ƒê√£ ph√°t hi·ªán {len(detections)} ƒë·ªëi t∆∞·ª£ng trong frame {self.frame_count}")
                
            return detections
        
        # 3. N·∫øu kh√¥ng c√≥ model v√† kh√¥ng c√≥ ground truth, tr·∫£ v·ªÅ r·ªóng
        print(f"‚ö†Ô∏è Kh√¥ng c√≥ c·∫£ model YOLO l·∫´n ground truth cho frame {frame_id}!")
        return []
